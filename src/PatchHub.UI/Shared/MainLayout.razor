@inherits LayoutComponentBase
@using System.Text.RegularExpressions
@using PatchHub.Infrastructure.Domain
@using PatchHub.Infrastructure.Models
@using PatchHub.Infrastructure.Repositories
@using PatchHub.Infrastructure.Services
@using PatchHub.UI.Components
@using PatchHub.UI.Components.Navbar
@inject NavigationManager NavigationManager

<PageTitle>PatchHub</PageTitle>

<MudThemeProvider @bind-IsDarkMode="@_darkMode" Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Style="height:100vh;">
    <MudAppBar Elevation="4">
		<MudGrid>
			<MudItem xs="6" md="8">
				<MudButton Color="Color.Inherit" OnClick="@((e) => DrawerToggle())">
					<MudIcon Icon="@Icons.Material.Rounded.ListAlt" Size="Size.Large"></MudIcon>
					<MudText Typo="Typo.h4" Color="Color.Surface" Inline="true">Patch</MudText>
					<MudText Typo="Typo.h4" Color="Color.Info" Inline="true">Hub</MudText>
				</MudButton>
			</MudItem>
			<MudItem xs="6" md="4" Class="d-flex justify-end gap-2">
				<SearchBar />
				<MudToggleIconButton Icon="@Icons.Material.Filled.WbSunny"
										Title="Switch To Light Mode"
										Variant="Variant.Text"
										ToggledIcon="@Icons.Material.Outlined.DarkMode"
										ToggledTitle="Switch To Dark Mode"
										ToggledChanged="ChangeTheme"/>
			</MudItem>
		</MudGrid>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<style>
    input {
        padding-top: 12px !important;
        padding-bottom: 12px !important;
    }
</style>

@code {
    private bool _darkMode { get; set; }

    private static MudTheme _darkTheme = new MudTheme();

    private static MudTheme _lightTheme = new MudTheme()
        {
            Palette = new Palette
            {
                AppbarBackground = Colors.Grey.Lighten3,
                AppbarText = Colors.Grey.Darken3,
                Background = Colors.Grey.Lighten3,
                DrawerBackground = Colors.Grey.Lighten3
            }
        };

    private MudTheme? _currentTheme { get; set; }

    bool _drawerOpen = true;

    protected override void OnInitialized()
    {
        _currentTheme = _darkTheme;
        _darkMode = true;
    }

    void ChangeTheme()
    {
        if (_darkMode)
        {
            _currentTheme = _lightTheme;
            _darkMode = false;
        }
        else
        {
            _currentTheme = _darkTheme;
            _darkMode = true;
        }
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        NavigationManager!.NavigateTo("/");
    }
}