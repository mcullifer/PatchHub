@using PatchHub.Infrastructure.Contracts.Responses
@using PatchHub.Infrastructure.Models
@using PatchHub.Infrastructure.Services
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

<MudGrid Spacing="4">
    @if (_newsItems != null) 
    {
        <MudItem md="4">
            <MudContainer id="PatchNoteListComponent" Class="overflow-y-scroll" Style="max-height:75vh;" Fixed="true">
                @foreach (var newsItem in _newsItems)
                {
                    <PatchNoteListItemComponent 
                        newsItem="newsItem" 
                        SteamApp="SteamApp" 
                        OnSelectedNewsItemChanged="newsItem => SetSelectedNewsItem(newsItem)"
                        IsCurrentlySelected=@(newsItem == _selectedNewsItem ? true : false)/>
                }
            </MudContainer>
        </MudItem>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudItem xs="12" md="7">
            <PatchNoteComponent newsItem="@_selectedNewsItem" SteamApp="@SteamApp" />
        </MudItem>
    }
</MudGrid>

@code {
    [Inject]
    protected SteamApiService SteamApi { get; set; }

    [Parameter]
    public SteamAppResponse SteamApp { get; set; }

    private IEnumerable<NewsItem>? _newsItems;

    private NewsItem? _selectedNewsItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _newsItems = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _newsItems = await SteamApi.GetNewsForAppAsync(SteamApp);
        await JsRuntime.InvokeVoidAsync("OnScrollEvent", "PatchNoteListComponent");
        _selectedNewsItem = _newsItems.FirstOrDefault();
    }

    private void SetSelectedNewsItem(NewsItem selectedNewsItem) 
    {
        _selectedNewsItem = selectedNewsItem;
        StateHasChanged();
    }
}
